#!/bin/bash

APP_DIR=$(dirname $(dirname $0))
TEMPLATE=$APP_DIR/template

if [ $# -eq 0 ]; then
	echo "Usage: $(basename $0) <config file>"
	exit 1
fi

arg=$(readlink -e $1)

if [ -z "$arg" ]; then
	echo "cannot access $1: No such file or directory"
	exit 3
elif [ -d "$arg" ]; then
	ROOT_DIR=$arg
	CONFIG=$arg/LIMS2file
elif [ -e "$arg" ]; then
	ROOT_DIR=$(dirname $arg)
	CONFIG=$arg
fi

cd "$ROOT_DIR" || exit 2

. $CONFIG

if [ -z "$SITE_ID" ]
then
	echo 'empty $SITE_ID'
	exit 1
fi

if [ -z "$LAB_ID" ]
then
	echo 'empty $LAB_ID'
	exit 1
fi

: ${CONTAINER_NAME:=$(basename $ROOT_DIR)}

: ${SRC_DIR:="${ROOT_DIR}/src"}
: ${TARGET_DIR:="${ROOT_DIR}/data"}

: ${LIMS2_DIR:="${SRC_DIR}/lims2"}
: ${LIMS2_GIT_URL:=/var/lib/git/lims2.git}
: ${LIMS2_COMMIT:=master}

: ${NODE_LIMS2_DIR:="${SRC_DIR}/node-lims2"}
: ${NODE_LIMS2_GIT_URL:=/var/lib/git/node-lims2.git}
: ${NODE_LIMS2_COMMIT:=master}

: ${GLOGON_SERVER_DIR:="${SRC_DIR}/glogon-server"}
: ${GLOGON_SERVER_GIT_URL:=/var/lib/git/glogon-server.git}
: ${GLOGON_SERVER_COMMIT:=master}

: ${LABS_DIR:="$TARGET_DIR/lib"}
: ${MYSQL_DIR:="$TARGET_DIR/mysql"}
: ${SPHINX_DIR:="$TARGET_DIR/sphinxsearch"}

: ${LOG_DIR:="$TARGET_DIR/logs"}
: ${CONFIG_DIR:="$TARGET_DIR/config"}

: ${NGINX_CONFIG_DIR:="$CONFIG_DIR/sites"}
: ${NGINX_LOG_DIR:="$LOG_DIR/nginx"}

: ${SPHINX_CONFIG_DIR:="$CONFIG_DIR/sphinxsearch"}
: ${SPHINX_LOG_DIR:="$LOG_DIR/sphinxsearch"}

: ${MYSQL_CONFIG_DIR:="$CONFIG_DIR/mysql"}
: ${MYSQL_LOG_DIR:="$LOG_DIR/mysql"}

: ${NODE_LIMS2_LOG_DIR:="$LOG_DIR/node-lims2"}

# The following variables will be used in `lims2` container.  Export them here.
export SITE_ID LAB_ID

if [ ! -d $TARGET_DIR ] 
then
	mkdir -p $(dirname $TARGET_DIR)
	cp -r $TEMPLATE $TARGET_DIR
	sed -i 's/$SITE_ID/'$SITE_ID'/g' $TARGET_DIR/config/sites/lims2
	sed -i 's/$LAB_ID/'$LAB_ID'/g' $TARGET_DIR/config/sites/lims2
	sed -i 's/$SITE_ID/'$SITE_ID'/g' $TARGET_DIR/config/sphinxsearch/conf.d/lims2.conf
	sed -i 's/$LAB_ID/'$LAB_ID'/g' $TARGET_DIR/config/sphinxsearch/conf.d/lims2.conf
fi

if docker inspect ${CONTAINER_NAME} >/dev/null 2>&1 ; then
	docker start ${CONTAINER_NAME}.mysql
	docker run --rm --link ${CONTAINER_NAME}.mysql:mysql --name ${CONTAINER_NAME}.wait-for-mysql $DOCKER_LIMS2_IMAGE /bin/sh -c 'while ! mysql -u genee -h mysql -p83719730 -e quit 2>/dev/null ; do sleep 1 ; done'
	docker start ${CONTAINER_NAME}
	exit 0
fi

DOCKER_LIMS2_IMAGE=iamfat/lims2

if [ "$ENABLE_SPHINX" == '1' ] 
then
	docker run --name ${CONTAINER_NAME}.sphinx -v /dev/log:/dev/log -v $TARGET_DIR:/data --privileged \
	    -v $SPHINX_DIR:/var/lib/sphinxsearch \
	    -v $SPHINX_CONFIG_DIR:/etc/sphinxsearch \
	    -v $SPHINX_LOG_DIR:/var/log/sphinxsearch \
	    -d iamfat/sphinxsearch
fi

if [ "$ENABLE_MYSQL" == '1' ] 
then
	MYSQL_CONTAINER_NAME=${CONTAINER_NAME}.mysql
	docker run --name $MYSQL_CONTAINER_NAME -v /dev/log:/dev/log -v $TARGET_DIR:/data --privileged \
	    -v $MYSQL_DIR:/var/lib/mysql \
	    -v $MYSQL_CONFIG_DIR:/etc/mysql \
	    -v $MYSQL_LOG_DIR:/var/log/mysql \
	    -d iamfat/mysql
	(
	docker run --rm --link ${CONTAINER_NAME}.mysql:mysql --name ${CONTAINER_NAME}.wait-for-mysql $DOCKER_LIMS2_IMAGE /bin/sh -c 'while ! mysql -u genee -h mysql -p83719730 -e quit 2>/dev/null ; do sleep 1 ; done'
	DB_NAME=lims2_${LAB_ID}
	docker run --rm --link ${CONTAINER_NAME}.mysql:mysql --name ${CONTAINER_NAME}.mysql-create-database $DOCKER_LIMS2_IMAGE mysql -u genee -h mysql -p83719730 -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME} DEFAULT CHARACTER SET utf8"
	if [ -n "$BACKUP_FILE" ]; then
		docker run -v ${BACKUP_FILE}:/backup.tgz --name ${MYSQL_CONTAINER_NAME}.import --link ${MYSQL_CONTAINER_NAME}:mysql $DOCKER_LIMS2_IMAGE /bin/sh -c "tar x -O -z -f /backup.tgz | mysql -u genee -p83719730 -h mysql ${DB_NAME}"
		docker run --rm --link ${CONTAINER_NAME}.mysql:mysql --name ${CONTAINER_NAME}.modify-default-password $DOCKER_LIMS2_IMAGE mysql -u genee -h mysql -p83719730 -e "UPDATE ${DB_NAME}._auth SET password = md5('83719730') WHERE token = 'genee'"
	fi
	) &
fi

[ -e $SRC_DIR ] || mkdir -p $SRC_DIR
cd $SRC_DIR || exit 2
# `-a` in `[` is NOT short-circuit.  Use `&&` instead.
[ -e $LIMS2_DIR ] && [ -n "$(ls -A $LIMS2_DIR)" ] || git clone --recursive --branch $LIMS2_COMMIT $LIMS2_GIT_URL $LIMS2_DIR
[ -e $NODE_LIMS2_DIR ] && [ -n "$(ls -A $NODE_LIMS2_DIR)" ] || git clone --recursive --branch $NODE_LIMS2_COMMIT $NODE_LIMS2_GIT_URL $NODE_LIMS2_DIR
[ -e $GLOGON_SERVER_DIR ] && [ -n "$(ls -A $GLOGON_SERVER_DIR)" ] || git clone --recursive --branch $GLOGON_SERVER_COMMIT $GLOGON_SERVER_GIT_URL $GLOGON_SERVER_DIR
cd $ROOT_DIR || exit 2

: ${BACKUP_LABS_DIR:=${LIMS2_DIR}/sites/${SITE_ID}/labs}
BACKUP_LABS_DIR=${BACKUP_LABS_DIR%%/}
[ -e ${LABS_DIR} ] || rsync -azKs "${BACKUP_LABS_DIR}/" "${LABS_DIR}"

export DOCKER_LIMS2_DIR=/usr/share/lims2
export DOCKER_LABS_DIR=/var/lib/lims2/sites/${SITE_ID}/labs
export DOCKER_CACHE_DIR=/var/cache/lims2
export DOCKER_NODE_LIMS2_DIR=/home/genee/node-lims2
export DOCKER_NODE_LIMS2_LOG_DIR=/var/log/node-lims2
export DOCKER_GLOGON_SERVER_DIR=/home/genee/glogon-server

ENV_FILE=${TARGET_DIR}/env

DATA_CONTAINER_NAME=${CONTAINER_NAME}.data

docker run --name ${DATA_CONTAINER_NAME} \
	-v /dev/log:/dev/log \
	-v /etc/cron.d \
	-v $TARGET_DIR:/data \
	-v $NGINX_CONFIG_DIR:/etc/nginx/sites-enabled \
	-v $NGINX_LOG_DIR:/var/log/nginx \
	-v $LIMS2_DIR:${DOCKER_LIMS2_DIR} \
	-v $LABS_DIR:${DOCKER_LABS_DIR}  \
	-v $DOCKER_CACHE_DIR \
	-v ${NODE_LIMS2_DIR}:${DOCKER_NODE_LIMS2_DIR} \
	-v ${NODE_LIMS2_LOG_DIR}:${DOCKER_NODE_LIMS2_LOG_DIR} \
	-v ${GLOGON_SERVER_DIR}:${DOCKER_GLOGON_SERVER_DIR} \
	--env-file $ENV_FILE \
	$DOCKER_LIMS2_IMAGE true

docker run --name ${CONTAINER_NAME}.symlink \
	--volumes-from $DATA_CONTAINER_NAME \
	--env-file $ENV_FILE \
	-d $DOCKER_LIMS2_IMAGE /data/bin/link-dirs.sh


docker run --name ${CONTAINER_NAME}.init-node-lims2 \
	--volumes-from $DATA_CONTAINER_NAME \
	--env-file $ENV_FILE \
	-d $DOCKER_LIMS2_IMAGE /data/bin/init-node-lims2.sh

docker run --name ${CONTAINER_NAME}.init-glogon-server \
	--volumes-from $DATA_CONTAINER_NAME \
	--env-file $ENV_FILE \
	-d $DOCKER_LIMS2_IMAGE /data/bin/init-glogon-server.sh

docker run --name ${CONTAINER_NAME}.generate-xinetd-conf \
	--volumes-from ${DATA_CONTAINER_NAME} \
	--env-file $ENV_FILE \
	-d $DOCKER_LIMS2_IMAGE /data/bin/generate-xinetd-conf.sh

docker wait ${MYSQL_CONTAINER_NAME}.import ${CONTAINER_NAME}.symlink ${CONTAINER_NAME}.init-node-lims2 ${CONTAINER_NAME}.init-glogon-server ${CONTAINER_NAME}.generate-xinetd-conf >/dev/null 2>&1

docker run --name ${CONTAINER_NAME}.get_cron \
	--volumes-from $DATA_CONTAINER_NAME \
	--env-file $ENV_FILE \
	--link ${MYSQL_CONTAINER_NAME}:mysql \
	$DOCKER_LIMS2_IMAGE /bin/sh -c '/data/bin/update-database-config.sh ; php ${DOCKER_LIMS2_DIR}/cli/get_cron.php -u=genee > /etc/cron.d/lims2'

docker run --name ${CONTAINER_NAME}.chown \
	--volumes-from ${DATA_CONTAINER_NAME} \
	--env-file $ENV_FILE \
	$DOCKER_LIMS2_IMAGE /data/bin/chown.sh

docker_cmd="docker run --name $CONTAINER_NAME --privileged"
docker_cmd="$docker_cmd --volumes-from ${DATA_CONTAINER_NAME}"
docker_cmd="$docker_cmd --env-file $ENV_FILE"
[ -z "$MYSQL_CONTAINER_NAME" ] || docker_cmd="$docker_cmd --link $MYSQL_CONTAINER_NAME:mysql"

if [ -z "$LIMS2_HOST_PORT" ]
then
	docker_cmd="$docker_cmd -p 80 -d $DOCKER_LIMS2_IMAGE"
else
	docker_cmd="$docker_cmd -p $LIMS2_HOST_PORT:80 -d $DOCKER_LIMS2_IMAGE"
fi

eval $docker_cmd
